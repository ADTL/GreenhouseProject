<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="content-type" content="text/html; charset=WINDOWS-1251"/>
<style type="text/css">
BODY, TD, DIV, SPAN, P, FONT {
	font-weight:normal;
	font-family:Arial;
	color:#000000;
	font-size:12px;
}
h1,h2,h3,h4 {
	color:#90d70f;
	margin-top:0px;
	margin-bottom:0px;
	padding-top:0px;
}
h1 {
	font-size:24px;
}
h2 {
	font-size:20px;
}
h3 {
	font-size:16px;
}
h4 {
	font-size:12px;
}
A {
color:#0d8ed8;
font-weight:normal;
font-family:Arial;
font-size:12px;
text-decoration:underline;
outline: none;
}
A:visited {
color:#119ae9;
font-weight:normal;
font-family:Arial;
font-size:12px;
text-decoration:underline;
outline: none;
}
A:hover {
color:#0d8ed8;
font-weight:normal;
font-family:Arial;
font-size:12px;
text-decoration:none;
outline: none;
}
A.sml {
font-size:10px;
}
.menu {
float:left;
width:20%;
padding-top:0px;
}
.content {
float:left;
width:75%;
clear:right;
padding:5px;
padding-left:15px;
}
.mi {
text-align:right;
background-color:#B5CFCE;
margin-bottom:2px;
padding:5px;
color:#000000;
font-weight:bold;
font-size:140%;
cursor:pointer;
}
.mis {
background-color:#F34448;
color:#f0f0f0;
}
.cpy {
font-size:10px;
color:#B0B0B0;
clear:left;
text-align:right;
margin-top:20px;
}
.hdn {
display:none;
}
.cth TD {
background-color:#F34448;
color:#f0f0f0;
font-size:140%;
font-weight:bold;
}
.ctr TD {
background-color:#B5CFCE;
color:#000000;
}
.mtop {
margin-top:10px;
}
.mbtm {
margin-bottom:10px;
}
.bld {
font-weight: bold;
}
.dred {
color:#D00000;
}
.dgreen {
color: #00D000;
}
INPUT[type=range] {
width:100px;
}
</style>
<script type="text/javascript">
var serverAddress = "http://192.168.0.34/"; // адрес контроллера, переопределить при необходимости

function prevent_default(e)
{
  if(!e)
    return;

  if(e.stopPropagation) e.stopPropagation();
  else e.cancelBubble = true;
  
  if(e.preventDefault) e.preventDefault();
  else e.returnValue = false; 
}
function OnlyDigits(event,elem) 
{
if(!event)
  event = window.event;

	if(event){
    var work = event.charCode || event.keyCode;
    
		if ((work < 45 || work> 57) ){
			if( !(work == 8 || work == 9 || work == 13) )
				prevent_default(event);
		}
	}
}
String.prototype.trim = function(){
	return this.replace(/^\s+|\s+$/g,"");
}
String.prototype.ltrim = function(){
	return this.replace(/^\s+/,"");
}
String.prototype.rtrim = function(){
	return this.replace(/\s+$/,"");
}
String.prototype.format = function(){
  var args = arguments;
  return this.replace(/{(\d+)}/g, function(match, number) { 
    return typeof args[number] != 'undefined'
      ? args[number]
      : match
    ;
  });
}
function getE(id){
	return document.getElementById(id);
}
function showElem(elemId, visible){
 var elem = getE(elemId);

 if(elem != null){
  var cs = elem.runtimeStyle;

  if(cs == null)
    cs = elem.style; // for Opera

  if(cs == null)
	 return;

  if(visible)
    cs.display = "block";
  else
    cs.display = "none";
  
 }
}
var Action = function(isGet,command,func_done,func_fail,elemToDisable){
 this.isGet =isGet;
 this.command = command;
 this.func_done = func_done;
 this.func_fail = func_fail;
 this.elemToDisable = elemToDisable;
 
return this;
}
var queue = new Array();
var currentAction = null;
function processQueue(){
  if(currentAction != null || !queue.length)
    return;
    
   currentAction = queue.shift();
   queryController(currentAction.isGet,currentAction.command,currentAction.func_done,currentAction.func_fail,currentAction.elemToDisable);
}
function inQueue(isGet,command){
for(var i=0;i<queue.length;i++){
  if(queue[i].isGet == isGet && queue[i].command == command)
    return true;
}
return false;
}
function addToQueue(isGet,command,func_done,func_fail,elemToDisable){

  if(inQueue(isGet,command)) return;

  var e = getE(elemToDisable);
  if(e)
    e.setAttribute("disabled","disabled");
  queue.push(new Action(isGet,command,func_done,func_fail,e));
}
function getXmlHttp(){
  var xmlhttp;
  try{
    xmlhttp = new ActiveXObject("Msxml2.XMLHTTP");
  } 
  catch (e){
    try{
      xmlhttp = new ActiveXObject("Microsoft.XMLHTTP");
    } 
    catch (E){
      xmlhttp = false;
    }
  }
  if (!xmlhttp && typeof XMLHttpRequest!='undefined'){
    xmlhttp = new XMLHttpRequest();
  }
  return xmlhttp;
}
var getPrefix = "CTGET=";
var setPrefix = "CTSET=";
var noData = "&lt;нет данных&gt;";
var workAsLocalPage = false;

function queryController(isGet, command, func_done,func_fail, elemToDisable){
  var xmlhttp = getXmlHttp();
  if(!xmlhttp){
    alert("No xmlhttp!");
    return;
  }
  
  var addr = (workAsLocalPage ? serverAddress : "/") + (isGet ? getPrefix : setPrefix) + command;
    
  xmlhttp.open("GET", addr, true);
  xmlhttp.onreadystatechange = function(){
  
    if (xmlhttp.readyState == 4){
       if(xmlhttp.status == 200){
         if(func_done)
          func_done(parse(eval("e = " + xmlhttp.responseText)));
          
         currentAction = null;
       }
       else{
        if(func_fail)
          func_fail();
          
        currentAction = null;
       }       
      if(elemToDisable)
        elemToDisable.removeAttribute("disabled");
    }  
  }
  xmlhttp.send(null);   
}
function reportError(query){
  alert("Неудачное выполнение запроса:\n\n" + query);
}
function parse(obj){
  var ans = obj.answer;
  var idx = ans.indexOf("=");
  var which = ans.substring(0,idx);
  if(which == "OK")
    obj.IsOkAnswer = true;
  else
    obj.IsOkAnswer = false;
    
  ans = ans.substring(idx+1);
  obj.Params = ans.split("|");
  
  return obj;
}
function reportTemperature(obj){
  if(obj.IsOkAnswer){
    var result = "";
    var template = getE("temp_template").innerHTML;
    result += template.format("cth","","Показания");
    // получили значение температур
    var sensorsCnt = obj.Params.length - 2;
    for(var i=0;i<sensorsCnt;i++){
      var tempData = obj.Params[2 + i];
      var dt = parseInt(tempData);
      if(isNaN(dt) || dt < 0) // нет показаний с датчика
        tempData = noData;
      else
        tempData += " &#0176;C";
        
      result += template.format("ctr",(i+1),tempData);
    }
    
    getE("temp_sensors_data").innerHTML = result;
  }
  else
    reportError(obj.query);
}
function reportHumidity(obj){
  if(obj.IsOkAnswer){
    var result = "";
    var template = getE("humidity_template").innerHTML;
    result += template.format("cth","","Влажность", "Температура");
    // получили значение температур и влажностей
    var sensorsCnt = parseInt(obj.Params[1]);
    for(var i=0;i<sensorsCnt;i+=2){
      var humidityData = obj.Params[2 + i];
      var dt = parseInt(humidityData);
      if(isNaN(dt) || dt < 0) // нет показаний с датчика
        humidityData = noData;
      else
        humidityData += "%";

      var tempData = obj.Params[3 + i];
      dt = parseInt(tempData);
      if(isNaN(dt) || dt < 0) // нет показаний с датчика
        tempData = noData;
      else
        tempData += " &#0176;C";
        
      result += template.format("ctr",(i+1),humidityData,tempData);
    }
    
    getE("humidity_sensors_data").innerHTML = result;
  }
  else
    reportError(obj.query);
}
var LightState = function(obj) {
 this.IsON = obj.Params[2] == "ON";
 this.IsAutoMode = obj.Params[3] == "AUTO";
return this;
}
var currentLightState = null;
function setLightStateUI(isOn,isAuto){
  
  if(lightActionRequested)
    return;
    
      var stateStr = isOn ? "ВКЛ" : "ВЫКЛ";
      var r = getE('light_on_off_b');
      var e = getE('sp_light_state');
      inLightOnOff = true;
      r.value = isOn ? 1 : 0;
      inLightOnOff = false;
      
      inLightSwitchState = true;
      r = getE('light_state_b');
      r.value = isAuto ? 1 : 0;
      inLightSwitchState = false;
      
      e.innerHTML  = stateStr;
      e.setAttribute("class", (isOn ? "bld dgreen" : "bld dred"));
}
function parseLightState(obj){
  currentLightState = new LightState(obj);
  setLightStateUI(currentLightState.IsON,currentLightState.IsAutoMode);
}

function reportLight(obj){
  if(obj.IsOkAnswer){
    var result = "";
    var template = getE("light_template").innerHTML;
    result += template.format("cth","Первый датчик","Второй датчик");
    // получили значение освещенности
      var light1 = obj.Params[1];
      var light2 = obj.Params[2];
      
      var dt = parseInt(light1);
      if(isNaN(dt) || dt < 0) // нет показаний с датчика
        light1 = noData;
      else
        light1 += " люкс";
        
      dt = parseInt(light2);
      if(isNaN(dt) || dt < 0) // нет показаний с датчика
        light2 = noData;
      else
        light2 += " люкс";
        
      result += template.format("ctr",light1,light2);
    
    getE("light_sensors_data").innerHTML = result;
  }
  else
    reportError(obj.query);
}
var lightActionRequested = false;
function reportLightOnOff(obj){
 if(obj.IsOkAnswer){
      lightActionRequested = false;
  }
  else
    reportError(obj.query);
}
function reportLightState(obj){
if(obj.IsOkAnswer){
  
  lightActionRequested = false;

}
 else
    reportError(obj.query);

}

function dummyFail(){
alert("Не удалось получить данные!");
}
function getTemperature(){
  addToQueue(true,"STATE|TEMP|ALL",reportTemperature,dummyFail, 'temp_b');
}
function getHumidity(){
  addToQueue(true,"HUMIDITY|ALL",reportHumidity,dummyFail, 'humidity_b');
}
function getLight(){
  addToQueue(true,"LIGHT",reportLight,dummyFail, 'light_b');
}
var inLightOnOff = false;
function lightOnOff(){
  if(inLightOnOff){
    inLightOnOff = false;
    return;
  }
  var command = "LIGHT|";
  var cs = "ON";
  
  var r = getE('light_on_off_b');
  
  if(r.value == 1)
    cs = "ON";
  else
    cs = "OFF";
    
  command += cs;
  lightActionRequested = true;
  addToQueue(false,command,reportLightOnOff,dummyFail, 'light_on_off_b');
}
var inLightSwitchState = false;
function lightSwitchState(){
if(inLightSwitchState) {
  inLightSwitchState = false;
  return;
  }
  var command = "LIGHT|MODE|";
  var cs = "ON";
  
  var r = getE('light_state_b');
  
  if(r.value == 1)
    cs = "AUTO";
  else
    cs = "MANUAL";
    
  command += cs;
  lightActionRequested = true;
  addToQueue(false,command,reportLightState,dummyFail, 'light_state_b');
}
function processStates(){
    addToQueue(true,"LIGHT|STATE",parseLightState,null, '');
}
var lastselmenu = null;
function init(){
selectmenu(getE('temp'));

if(window.location.protocol.indexOf("file") != -1) 
  workAsLocalPage = true; // мы запущены с локального диска
else
  workAsLocalPage = false;
  
  // команды получения текущего состояния датчиков
  processStates();
  addToQueue(true,"STATE|TEMP|ALL",reportTemperature,dummyFail, 'temp_b');
  addToQueue(true,"HUMIDITY|ALL",reportHumidity,dummyFail, 'humidity_b');
  addToQueue(true,"LIGHT",reportLight,dummyFail, 'light_b');
  addToQueue(true,"LIGHT|MODE",reportLightState,dummyFail, 'light_state_b');

  window.setInterval(processStates,1000);

  window.setInterval(processQueue,100);
}
function unselectmenu(elem){
  elem.removeAttribute("class");
  elem.setAttribute("class","mi");
  showElem("c_" + elem.id, false);
}
function selectmenu(elem){
  if(lastselmenu != null)
    unselectmenu(lastselmenu);
    
  lastselmenu = elem;

  elem.removeAttribute("class");
  elem.setAttribute("class","mi mis");
  
  getE('ttl').innerHTML = elem.innerHTML;
  
  showElem("c_" + elem.id, true);

}
</script>
<title>Контроллер теплицы на базе Arduino Mega</title>

</head>
<body leftmargin='40' topmargin='20' marginwidth='40' marginheight='20' bgcolor='#FFFFFF' onload='init();'>
<div class='hdn' id='temp_template'><table border='0'width='100%'><tr class='{0}'><td width='50'>#{1}</td><td width='*'>{2}</td></tr></table></div>
<div class='hdn' id='humidity_template'><table border='0'width='100%'><tr class='{0}'><td width='50'>#{1}</td><td width='*'>{2}</td><td width='*'>{3}</td></tr></table></div>
<div class='hdn' id='light_template'><table border='0'width='100%'><tr class='{0}'><td width='50%'>{1}</td><td width='50%'>{2}</td></tr></table></div>
<div class='menu'>&nbsp;</div>
<div class='content'>
<h1 id='ttl'></h1>
</div>
<div class='menu'>
<div class='mi mis' id='temp' onclick="selectmenu(this);">Температура</div>
<div class='mi' id='windows' onclick="selectmenu(this);">Фрамуги</div>
<div class='mi' id='water' onclick="selectmenu(this);">Полив</div>
<div class='mi' id='light' onclick="selectmenu(this);">Досветка</div>
<div class='mi' id='humidity' onclick="selectmenu(this);">Влажность</div>
</div>
<div class='content'>

<div id='c_temp' class='hdn'>
<h2>Показания датчиков температуры</h2>
<div id='temp_sensors_data'><p>Для получения значения с датчиков температуры нажмите кнопку ниже.</div>
<p><input type='button' onclick='getTemperature()' id='temp_b' value='Опросить датчики'/></p>
</div>
<div id='c_windows' class='hdn'>Контент фрамуг</div>
<div id='c_water' class='hdn'>Контент полива</div>
<div id='c_light' class='hdn'>
<h2>Показания датчиков освещенности</h2>
<div id='light_sensors_data'><p>Для получения значения с датчиков влажности нажмите кнопку ниже.</div>
<p><input type='button' onclick='getLight()' id='light_b' value='Опросить датчики'/></p>
<h2 class='mtop mbtm'>Управление досветкой</h2>
Состояние досветки: <span id="sp_light_state" class='bld dred'></span>
<p><span class='bld dred'>ВЫКЛ</span> <input type='range' min='0' max='1' onchange="lightOnOff();" id='light_on_off_b' value='0'/> <span class='bld dgreen'>ВКЛ</span></p>
<p>Режим работы:<br/><span class='bld dred'>Ручной</span> <input type='range' min='0' max='1' onchange="lightSwitchState();" id='light_state_b' value='0'/> <span class='bld dgreen'>Авто</span></p>
</div>
<div id='c_humidity' class='hdn'>
<h2>Показания датчиков влажности</h2>
<div id='humidity_sensors_data'><p>Для получения значения с датчиков влажности нажмите кнопку ниже.</div>
<p><input type='button' onclick='getHumidity()' id='humidity_b' value='Опросить датчики'/></p>
</div>


</div>
<div class='cpy'>
&copy;2016, Контроллер теплицы. Автор: Порохня Дмитрий, <a href='mailto:spywarrior@gmail.com' class='sml'>spywarrior@gmail.com</a>.
</div>
</body>
</html>
